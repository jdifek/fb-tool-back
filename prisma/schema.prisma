// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  email           String            @unique
  passwordHash    String
  firstName       String?
  lastName        String?
  role            Role              @default(USER)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  FacebookAccount FacebookAccount[]
}

enum Role {
  SUPERADMIN
  USER
}

model FacebookAccount {
  id          Int             @id @default(autoincrement())
  userId      Int
  user        User            @relation(fields: [userId], references: [id])
  name        String
  fbUserId    String          @unique
  accessToken String
  status      FbAccountStatus @default(ACTIVE)
  adAccounts  AdAccount[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  Proxy       Proxy?
}

model AdAccount {
  id                Int             @id @default(autoincrement())
  facebookAccount   FacebookAccount @relation(fields: [facebookAccountId], references: [id])
  facebookAccountId Int
  adAccountId       String          @unique
  name              String
  businessId        String?
  currency          String?
  timezone          String?
  country           String?
  status            AdAccountStatus
  hasCard           Boolean
  hasPixel          Boolean
  notifications     Boolean         @default(false)
  autoCommenting    Boolean         @default(false)
}

model Proxy {
  id                Int              @id @default(autoincrement())
  ip                String
  port              Int
  username          String?
  password          String?
  status            ProxyStatus      @default(ACTIVE) // живой / неживой
  facebookAccount   FacebookAccount? @relation(fields: [facebookAccountId], references: [id])
  facebookAccountId Int?             @unique
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

enum ProxyStatus {
  ACTIVE
  DEAD
}

enum FbAccountStatus {
  ACTIVE
  CHECKPOINT
  BANNED
}

enum AdAccountStatus {
  ACTIVE
  GRACE
  CLOSED
  BLOCKED
}
